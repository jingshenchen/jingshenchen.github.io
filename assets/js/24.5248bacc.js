(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{383:function(e,v,_){"use strict";_.r(v);var p=_(45),o=Object(p.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"webpack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),_("blockquote",[_("p",[e._v("webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的html，css，js和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加速器，而且会分析模块间的依赖关系，最后合并生成优化的静态资源")]),e._v(" "),_("blockquote"),e._v(" "),_("p",[e._v("基本功能")]),e._v(" "),_("blockquote",[_("p",[e._v("代码转换：Typescript编译成javascript、scss编译成css等等")]),e._v(" "),_("p",[e._v("文件优化：压缩JavaScript、css、html代码，压缩合并图片等")]),e._v(" "),_("p",[e._v("代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载")]),e._v(" "),_("p",[e._v("模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件")]),e._v(" "),_("p",[e._v("自动刷新：监听本地源代码的变化，自动构建，刷新浏览器")]),e._v(" "),_("p",[e._v("代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过")]),e._v(" "),_("p",[e._v("自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。")])]),e._v(" "),_("p",[e._v("构建过程")]),e._v(" "),_("blockquote",[_("p",[e._v("1.从entry里配置的module开始递归解析entry依赖的所有module,每找到一个module，就会根据配置的loader去找对应的转换规则。")]),e._v(" "),_("p",[e._v("2.对module进行转换后，再解析出当前module依赖的module这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk。")]),e._v(" "),_("p",[e._v("3.最后webpack会把所有Chunk转换成文件输出，在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑")])]),e._v(" "),_("p",[e._v("打包原理")]),e._v(" "),_("blockquote",[_("p",[e._v("将所有依赖打包成一个bundle.js,通过代码分割成单元片段按需加载。")])]),e._v(" "),_("p",[e._v("entry 和 output")]),e._v(" "),_("blockquote",[_("p",[e._v("entry 入口，告诉webpack要使用哪个模块作为构建项目的起点，默认为./src/index.js")]),e._v(" "),_("p",[e._v("output 出口，告诉webpack在哪里输出它打包好的代码以及如何命名，默认为./dist")])]),e._v(" "),_("p",[e._v("loader,plugins")]),e._v(" "),_("blockquote",[_("p",[e._v("loader是用来告诉webpack如何转换某一类型的文件，并且引入到打包出的文件中")]),e._v(" "),_("p",[e._v("plugins(插件)作用更大，可以打包优化，资源管理和注入环境变量")]),e._v(" "),_("p",[e._v("loader使webpack拥有加载和解析非js文件的能力，plugins可以扩展webpack的功能，使得webpack更加灵活。可以在构建的过程中通过webpack的api改变输出的结果。")])]),e._v(" "),_("p",[e._v("bundle,chunk,module")]),e._v(" "),_("blockquote",[_("p",[e._v("bundle是webpack打包出来的文件")]),e._v(" "),_("p",[e._v("chunk是webpack在进行模块的依赖分析的时候，代码分割出来的代码块。")]),e._v(" "),_("p",[e._v("module是开发中的单个模块")])]),e._v(" "),_("p",[e._v("打包注意点")]),e._v(" "),_("blockquote",[_("p",[e._v("完善基本信息；定义依赖；忽略文件；打标签；")])]),e._v(" "),_("p",[e._v("常见Loader")]),e._v(" "),_("blockquote",[_("p",[e._v("file-loader: 把文件输出到一个文件夹中，在代码中通过相对URL去引用输出的文件；")]),e._v(" "),_("p",[e._v("url-loader: 和file-loader类似，但是能在文件很小的情况下以base64的方式把文件内容注入到代码中去")]),e._v(" "),_("p",[e._v("source-map-loader:加载额外的SourceMap文件，以方便断点调试。")]),e._v(" "),_("p",[e._v("image-loader: 加载并且压缩图片文件")]),e._v(" "),_("p",[e._v("babel-loader: 把ES6转换成ES5")]),e._v(" "),_("p",[e._v("css-loader: 加载css,支持模块化、压缩、文件导入等特性。")]),e._v(" "),_("p",[e._v("style-loader: 把css代码注入到JavaScript中，通过DOM操作去加载css;")]),e._v(" "),_("p",[e._v("eslint-loader: 通过ESlint检查JavaScript代码")])]),e._v(" "),_("p",[e._v("webpack规范")]),e._v(" "),_("blockquote",[_("p",[e._v("webpack默认遵循common.js,使用webpack进行打包时有两种模式：")]),e._v(" "),_("blockquote",[_("p",[e._v("开发模式：主要用于测试，代码调试等")])]),e._v(" "),_("blockquote",[_("p",[e._v("生产模式：要考虑性能问题，要压缩，如果没有插件就不压缩；")])]),e._v(" "),_("blockquote",[_("p",[e._v("默认情况下webpack的配置文件叫webpack.config,可以通过--config指定webpack的配置文件名")])])])])])}),[],!1,null,null,null);v.default=o.exports}}]);